// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: arc.proto

package arcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ARC_CreateWorkflow_FullMethodName      = "/arc.v1.ARC/CreateWorkflow"
	ARC_StartWorkflow_FullMethodName       = "/arc.v1.ARC/StartWorkflow"
	ARC_StopWorkflow_FullMethodName        = "/arc.v1.ARC/StopWorkflow"
	ARC_GetWorkflow_FullMethodName         = "/arc.v1.ARC/GetWorkflow"
	ARC_ListWorkflows_FullMethodName       = "/arc.v1.ARC/ListWorkflows"
	ARC_CreateRealTimeAgent_FullMethodName = "/arc.v1.ARC/CreateRealTimeAgent"
	ARC_StartRealTimeAgent_FullMethodName  = "/arc.v1.ARC/StartRealTimeAgent"
	ARC_StopRealTimeAgent_FullMethodName   = "/arc.v1.ARC/StopRealTimeAgent"
	ARC_PauseRealTimeAgent_FullMethodName  = "/arc.v1.ARC/PauseRealTimeAgent"
	ARC_ResumeRealTimeAgent_FullMethodName = "/arc.v1.ARC/ResumeRealTimeAgent"
	ARC_GetRealTimeAgent_FullMethodName    = "/arc.v1.ARC/GetRealTimeAgent"
	ARC_ListRealTimeAgents_FullMethodName  = "/arc.v1.ARC/ListRealTimeAgents"
	ARC_GetAgentStatus_FullMethodName      = "/arc.v1.ARC/GetAgentStatus"
	ARC_GetAgentLogs_FullMethodName        = "/arc.v1.ARC/GetAgentLogs"
	ARC_StreamAgentLogs_FullMethodName     = "/arc.v1.ARC/StreamAgentLogs"
	ARC_SendMessage_FullMethodName         = "/arc.v1.ARC/SendMessage"
	ARC_PublishTask_FullMethodName         = "/arc.v1.ARC/PublishTask"
	ARC_GetQueueStats_FullMethodName       = "/arc.v1.ARC/GetQueueStats"
	ARC_ListQueues_FullMethodName          = "/arc.v1.ARC/ListQueues"
	ARC_StreamEvents_FullMethodName        = "/arc.v1.ARC/StreamEvents"
	ARC_RegisterExternalAMQ_FullMethodName = "/arc.v1.ARC/RegisterExternalAMQ"
	ARC_Health_FullMethodName              = "/arc.v1.ARC/Health"
	ARC_Ready_FullMethodName               = "/arc.v1.ARC/Ready"
)

// ARCClient is the client API for ARC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ARC service provides orchestration of agents and workflows
type ARCClient interface {
	// Workflow operations
	CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error)
	StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error)
	StopWorkflow(ctx context.Context, in *StopWorkflowRequest, opts ...grpc.CallOption) (*StopWorkflowResponse, error)
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error)
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
	// Real-time agent operations
	CreateRealTimeAgent(ctx context.Context, in *CreateRealTimeAgentRequest, opts ...grpc.CallOption) (*CreateRealTimeAgentResponse, error)
	StartRealTimeAgent(ctx context.Context, in *StartRealTimeAgentRequest, opts ...grpc.CallOption) (*StartRealTimeAgentResponse, error)
	StopRealTimeAgent(ctx context.Context, in *StopRealTimeAgentRequest, opts ...grpc.CallOption) (*StopRealTimeAgentResponse, error)
	PauseRealTimeAgent(ctx context.Context, in *PauseRealTimeAgentRequest, opts ...grpc.CallOption) (*PauseRealTimeAgentResponse, error)
	ResumeRealTimeAgent(ctx context.Context, in *ResumeRealTimeAgentRequest, opts ...grpc.CallOption) (*ResumeRealTimeAgentResponse, error)
	GetRealTimeAgent(ctx context.Context, in *GetRealTimeAgentRequest, opts ...grpc.CallOption) (*GetRealTimeAgentResponse, error)
	ListRealTimeAgents(ctx context.Context, in *ListRealTimeAgentsRequest, opts ...grpc.CallOption) (*ListRealTimeAgentsResponse, error)
	// Agent management
	GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error)
	GetAgentLogs(ctx context.Context, in *GetAgentLogsRequest, opts ...grpc.CallOption) (*GetAgentLogsResponse, error)
	StreamAgentLogs(ctx context.Context, in *StreamAgentLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	// Message queue operations
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	PublishTask(ctx context.Context, in *PublishTaskRequest, opts ...grpc.CallOption) (*PublishTaskResponse, error)
	GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error)
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	// Event streaming
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	// External AMQ management
	RegisterExternalAMQ(ctx context.Context, in *RegisterExternalAMQRequest, opts ...grpc.CallOption) (*RegisterExternalAMQResponse, error)
	// Health and readiness
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	Ready(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type aRCClient struct {
	cc grpc.ClientConnInterface
}

func NewARCClient(cc grpc.ClientConnInterface) ARCClient {
	return &aRCClient{cc}
}

func (c *aRCClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkflowResponse)
	err := c.cc.Invoke(ctx, ARC_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartWorkflowResponse)
	err := c.cc.Invoke(ctx, ARC_StartWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) StopWorkflow(ctx context.Context, in *StopWorkflowRequest, opts ...grpc.CallOption) (*StopWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopWorkflowResponse)
	err := c.cc.Invoke(ctx, ARC_StopWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowResponse)
	err := c.cc.Invoke(ctx, ARC_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, ARC_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) CreateRealTimeAgent(ctx context.Context, in *CreateRealTimeAgentRequest, opts ...grpc.CallOption) (*CreateRealTimeAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRealTimeAgentResponse)
	err := c.cc.Invoke(ctx, ARC_CreateRealTimeAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) StartRealTimeAgent(ctx context.Context, in *StartRealTimeAgentRequest, opts ...grpc.CallOption) (*StartRealTimeAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRealTimeAgentResponse)
	err := c.cc.Invoke(ctx, ARC_StartRealTimeAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) StopRealTimeAgent(ctx context.Context, in *StopRealTimeAgentRequest, opts ...grpc.CallOption) (*StopRealTimeAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopRealTimeAgentResponse)
	err := c.cc.Invoke(ctx, ARC_StopRealTimeAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) PauseRealTimeAgent(ctx context.Context, in *PauseRealTimeAgentRequest, opts ...grpc.CallOption) (*PauseRealTimeAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseRealTimeAgentResponse)
	err := c.cc.Invoke(ctx, ARC_PauseRealTimeAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) ResumeRealTimeAgent(ctx context.Context, in *ResumeRealTimeAgentRequest, opts ...grpc.CallOption) (*ResumeRealTimeAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeRealTimeAgentResponse)
	err := c.cc.Invoke(ctx, ARC_ResumeRealTimeAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) GetRealTimeAgent(ctx context.Context, in *GetRealTimeAgentRequest, opts ...grpc.CallOption) (*GetRealTimeAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealTimeAgentResponse)
	err := c.cc.Invoke(ctx, ARC_GetRealTimeAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) ListRealTimeAgents(ctx context.Context, in *ListRealTimeAgentsRequest, opts ...grpc.CallOption) (*ListRealTimeAgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRealTimeAgentsResponse)
	err := c.cc.Invoke(ctx, ARC_ListRealTimeAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentStatusResponse)
	err := c.cc.Invoke(ctx, ARC_GetAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) GetAgentLogs(ctx context.Context, in *GetAgentLogsRequest, opts ...grpc.CallOption) (*GetAgentLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentLogsResponse)
	err := c.cc.Invoke(ctx, ARC_GetAgentLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) StreamAgentLogs(ctx context.Context, in *StreamAgentLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ARC_ServiceDesc.Streams[0], ARC_StreamAgentLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAgentLogsRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ARC_StreamAgentLogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *aRCClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ARC_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) PublishTask(ctx context.Context, in *PublishTaskRequest, opts ...grpc.CallOption) (*PublishTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishTaskResponse)
	err := c.cc.Invoke(ctx, ARC_PublishTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatsResponse)
	err := c.cc.Invoke(ctx, ARC_GetQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueuesResponse)
	err := c.cc.Invoke(ctx, ARC_ListQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ARC_ServiceDesc.Streams[1], ARC_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ARC_StreamEventsClient = grpc.ServerStreamingClient[Event]

func (c *aRCClient) RegisterExternalAMQ(ctx context.Context, in *RegisterExternalAMQRequest, opts ...grpc.CallOption) (*RegisterExternalAMQResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterExternalAMQResponse)
	err := c.cc.Invoke(ctx, ARC_RegisterExternalAMQ_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ARC_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRCClient) Ready(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, ARC_Ready_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ARCServer is the server API for ARC service.
// All implementations must embed UnimplementedARCServer
// for forward compatibility.
//
// ARC service provides orchestration of agents and workflows
type ARCServer interface {
	// Workflow operations
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error)
	StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error)
	StopWorkflow(context.Context, *StopWorkflowRequest) (*StopWorkflowResponse, error)
	GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error)
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)
	// Real-time agent operations
	CreateRealTimeAgent(context.Context, *CreateRealTimeAgentRequest) (*CreateRealTimeAgentResponse, error)
	StartRealTimeAgent(context.Context, *StartRealTimeAgentRequest) (*StartRealTimeAgentResponse, error)
	StopRealTimeAgent(context.Context, *StopRealTimeAgentRequest) (*StopRealTimeAgentResponse, error)
	PauseRealTimeAgent(context.Context, *PauseRealTimeAgentRequest) (*PauseRealTimeAgentResponse, error)
	ResumeRealTimeAgent(context.Context, *ResumeRealTimeAgentRequest) (*ResumeRealTimeAgentResponse, error)
	GetRealTimeAgent(context.Context, *GetRealTimeAgentRequest) (*GetRealTimeAgentResponse, error)
	ListRealTimeAgents(context.Context, *ListRealTimeAgentsRequest) (*ListRealTimeAgentsResponse, error)
	// Agent management
	GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error)
	GetAgentLogs(context.Context, *GetAgentLogsRequest) (*GetAgentLogsResponse, error)
	StreamAgentLogs(*StreamAgentLogsRequest, grpc.ServerStreamingServer[LogEntry]) error
	// Message queue operations
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	PublishTask(context.Context, *PublishTaskRequest) (*PublishTaskResponse, error)
	GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error)
	ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error)
	// Event streaming
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error
	// External AMQ management
	RegisterExternalAMQ(context.Context, *RegisterExternalAMQRequest) (*RegisterExternalAMQResponse, error)
	// Health and readiness
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	Ready(context.Context, *emptypb.Empty) (*ReadyResponse, error)
	mustEmbedUnimplementedARCServer()
}

// UnimplementedARCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedARCServer struct{}

func (UnimplementedARCServer) CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedARCServer) StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflow not implemented")
}
func (UnimplementedARCServer) StopWorkflow(context.Context, *StopWorkflowRequest) (*StopWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorkflow not implemented")
}
func (UnimplementedARCServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedARCServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedARCServer) CreateRealTimeAgent(context.Context, *CreateRealTimeAgentRequest) (*CreateRealTimeAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealTimeAgent not implemented")
}
func (UnimplementedARCServer) StartRealTimeAgent(context.Context, *StartRealTimeAgentRequest) (*StartRealTimeAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRealTimeAgent not implemented")
}
func (UnimplementedARCServer) StopRealTimeAgent(context.Context, *StopRealTimeAgentRequest) (*StopRealTimeAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRealTimeAgent not implemented")
}
func (UnimplementedARCServer) PauseRealTimeAgent(context.Context, *PauseRealTimeAgentRequest) (*PauseRealTimeAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseRealTimeAgent not implemented")
}
func (UnimplementedARCServer) ResumeRealTimeAgent(context.Context, *ResumeRealTimeAgentRequest) (*ResumeRealTimeAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRealTimeAgent not implemented")
}
func (UnimplementedARCServer) GetRealTimeAgent(context.Context, *GetRealTimeAgentRequest) (*GetRealTimeAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeAgent not implemented")
}
func (UnimplementedARCServer) ListRealTimeAgents(context.Context, *ListRealTimeAgentsRequest) (*ListRealTimeAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealTimeAgents not implemented")
}
func (UnimplementedARCServer) GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStatus not implemented")
}
func (UnimplementedARCServer) GetAgentLogs(context.Context, *GetAgentLogsRequest) (*GetAgentLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentLogs not implemented")
}
func (UnimplementedARCServer) StreamAgentLogs(*StreamAgentLogsRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAgentLogs not implemented")
}
func (UnimplementedARCServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedARCServer) PublishTask(context.Context, *PublishTaskRequest) (*PublishTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTask not implemented")
}
func (UnimplementedARCServer) GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStats not implemented")
}
func (UnimplementedARCServer) ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedARCServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedARCServer) RegisterExternalAMQ(context.Context, *RegisterExternalAMQRequest) (*RegisterExternalAMQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExternalAMQ not implemented")
}
func (UnimplementedARCServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedARCServer) Ready(context.Context, *emptypb.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedARCServer) mustEmbedUnimplementedARCServer() {}
func (UnimplementedARCServer) testEmbeddedByValue()             {}

// UnsafeARCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ARCServer will
// result in compilation errors.
type UnsafeARCServer interface {
	mustEmbedUnimplementedARCServer()
}

func RegisterARCServer(s grpc.ServiceRegistrar, srv ARCServer) {
	// If the following call pancis, it indicates UnimplementedARCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ARC_ServiceDesc, srv)
}

func _ARC_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).CreateWorkflow(ctx, req.(*CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_StartWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).StartWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_StartWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).StartWorkflow(ctx, req.(*StartWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_StopWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).StopWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_StopWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).StopWorkflow(ctx, req.(*StopWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_CreateRealTimeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealTimeAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).CreateRealTimeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_CreateRealTimeAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).CreateRealTimeAgent(ctx, req.(*CreateRealTimeAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_StartRealTimeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRealTimeAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).StartRealTimeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_StartRealTimeAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).StartRealTimeAgent(ctx, req.(*StartRealTimeAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_StopRealTimeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRealTimeAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).StopRealTimeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_StopRealTimeAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).StopRealTimeAgent(ctx, req.(*StopRealTimeAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_PauseRealTimeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRealTimeAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).PauseRealTimeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_PauseRealTimeAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).PauseRealTimeAgent(ctx, req.(*PauseRealTimeAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_ResumeRealTimeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRealTimeAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).ResumeRealTimeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_ResumeRealTimeAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).ResumeRealTimeAgent(ctx, req.(*ResumeRealTimeAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_GetRealTimeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealTimeAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).GetRealTimeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_GetRealTimeAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).GetRealTimeAgent(ctx, req.(*GetRealTimeAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_ListRealTimeAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRealTimeAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).ListRealTimeAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_ListRealTimeAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).ListRealTimeAgents(ctx, req.(*ListRealTimeAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_GetAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).GetAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_GetAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).GetAgentStatus(ctx, req.(*GetAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_GetAgentLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).GetAgentLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_GetAgentLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).GetAgentLogs(ctx, req.(*GetAgentLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_StreamAgentLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ARCServer).StreamAgentLogs(m, &grpc.GenericServerStream[StreamAgentLogsRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ARC_StreamAgentLogsServer = grpc.ServerStreamingServer[LogEntry]

func _ARC_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_PublishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).PublishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_PublishTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).PublishTask(ctx, req.(*PublishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_GetQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).GetQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_GetQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).GetQueueStats(ctx, req.(*GetQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_ListQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).ListQueues(ctx, req.(*ListQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ARCServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ARC_StreamEventsServer = grpc.ServerStreamingServer[Event]

func _ARC_RegisterExternalAMQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExternalAMQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).RegisterExternalAMQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_RegisterExternalAMQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).RegisterExternalAMQ(ctx, req.(*RegisterExternalAMQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARC_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARCServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ARC_Ready_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARCServer).Ready(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ARC_ServiceDesc is the grpc.ServiceDesc for ARC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ARC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arc.v1.ARC",
	HandlerType: (*ARCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _ARC_CreateWorkflow_Handler,
		},
		{
			MethodName: "StartWorkflow",
			Handler:    _ARC_StartWorkflow_Handler,
		},
		{
			MethodName: "StopWorkflow",
			Handler:    _ARC_StopWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _ARC_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _ARC_ListWorkflows_Handler,
		},
		{
			MethodName: "CreateRealTimeAgent",
			Handler:    _ARC_CreateRealTimeAgent_Handler,
		},
		{
			MethodName: "StartRealTimeAgent",
			Handler:    _ARC_StartRealTimeAgent_Handler,
		},
		{
			MethodName: "StopRealTimeAgent",
			Handler:    _ARC_StopRealTimeAgent_Handler,
		},
		{
			MethodName: "PauseRealTimeAgent",
			Handler:    _ARC_PauseRealTimeAgent_Handler,
		},
		{
			MethodName: "ResumeRealTimeAgent",
			Handler:    _ARC_ResumeRealTimeAgent_Handler,
		},
		{
			MethodName: "GetRealTimeAgent",
			Handler:    _ARC_GetRealTimeAgent_Handler,
		},
		{
			MethodName: "ListRealTimeAgents",
			Handler:    _ARC_ListRealTimeAgents_Handler,
		},
		{
			MethodName: "GetAgentStatus",
			Handler:    _ARC_GetAgentStatus_Handler,
		},
		{
			MethodName: "GetAgentLogs",
			Handler:    _ARC_GetAgentLogs_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ARC_SendMessage_Handler,
		},
		{
			MethodName: "PublishTask",
			Handler:    _ARC_PublishTask_Handler,
		},
		{
			MethodName: "GetQueueStats",
			Handler:    _ARC_GetQueueStats_Handler,
		},
		{
			MethodName: "ListQueues",
			Handler:    _ARC_ListQueues_Handler,
		},
		{
			MethodName: "RegisterExternalAMQ",
			Handler:    _ARC_RegisterExternalAMQ_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ARC_Health_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _ARC_Ready_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAgentLogs",
			Handler:       _ARC_StreamAgentLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _ARC_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arc.proto",
}
